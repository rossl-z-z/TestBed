cmake_minimum_required(VERSION 2.8)

# Libraries
set (USE_CEGUI TRUE)
set (USE_PHYSX FALSE)
set (USE_OPENAL FALSE)

# OGRE plugins
set (USE_TERRAIN FALSE)
set (USE_CG_PROGRAM_MANAGER FALSE)
set (USE_OCTREE_SCENE_MANAGER TRUE)

project(TestBed)

if(WIN32)
  set(CMAKE_MODULE_PATH "$ENV{OGRE_HOME}/CMake/;${CMAKE_SOURCE_DIR}/cmake;${CMAKE_MODULE_PATH}")
  set(OGRE_SAMPLES_INCLUDEPATH
    $ENV{OGRE_HOME}/Samples/include
    )

  set( BOOST_ROOT D:/dev/boost_1_52_0)
  set( BOOST_INCLUDEDIR D:/dev/boost_1_52_0)	
  set( BOOST_LIBRARYDIR D:/dev/boost_1_52_0/stage/lib)
endif(WIN32)

if(UNIX)
  if(EXISTS "/usr/local/lib/OGRE/cmake")
    set(CMAKE_MODULE_PATH "/usr/local/lib/OGRE/cmake/;${CMAKE_MODULE_PATH}")
    set(OGRE_SAMPLES_INCLUDEPATH "/usr/local/share/OGRE/samples/Common/include/") # We could just *assume* that developers uses this basepath : /usr/local
  elseif(EXISTS "/usr/lib/OGRE/cmake")
    set(CMAKE_MODULE_PATH "/usr/lib/OGRE/cmake/;${CMAKE_MODULE_PATH}")
    set(OGRE_SAMPLES_INCLUDEPATH "/usr/share/OGRE/samples/Common/include/") # Otherwise, this one
  else ()
    message(SEND_ERROR "Failed to find module path.")
  endif(EXISTS "/usr/local/lib/OGRE")
endif(UNIX)

if (CMAKE_BUILD_TYPE STREQUAL "")
  # CMake defaults to leaving CMAKE_BUILD_TYPE empty. This screws up
  # differentiation between debug and release builds.
  set(CMAKE_BUILD_TYPE "RelWithDebInfo" CACHE STRING "Choose the type of build, options are: None (CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif ()

set(CMAKE_DEBUG_POSTFIX "_d")

set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/dist")

find_package(OGRE REQUIRED)

if(NOT "${OGRE_VERSION_NAME}" STREQUAL "Byatis")
  message(SEND_ERROR "You need Ogre 1.8 Cthugha to build this... (${OGRE_VERSION_NAME})")
endif()

if (USE_CEGUI)
  find_package(CEGUI)
  if(CEGUI_FOUND)
    include_directories(${CEGUI_INCLUDE_DIR})
    set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${CEGUI_LIBRARIES})  
    message(STATUS "Found CEGUI: ${CEGUI_LIBRARIES}")
  else ()
    message(SEND_ERROR "Failed to find CEGUI.")
  endif()
endif()

if (USE_PHYSX)
endif()

if (USE_TERRAIN)
  if (OGRE_Terrain_FOUND)
    # include_directories(${OGRE_Terrain_INCLUDE_DIRS})
    set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${OGRE_Terrain_LIBRARIES})  
    message(STATUS "Found OGRE_Terrain: ${OGRE_Terrain_LIBRARIES}")
  else (OGRE_Terrain_FOUND)
    message(SEND_ERROR "OgreTerrain Library not found.")
  endif(OGRE_Terrain_FOUND)

  if (OGRE_Paging_FOUND)
    # include_directories(${OGRE_Terrain_INCLUDE_DIRS})
    set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${OGRE_Paging_LIBRARIES})  
    message(STATUS "Found OGRE_Paging: ${OGRE_Paging_LIBRARIES}")
  else (OGRE_Paging_FOUND)
    message(SEND_ERROR "OgrePaging Library not found.")
  endif(OGRE_Paging_FOUND)
endif(USE_TERRAIN)

# Find Boost
if (NOT OGRE_BUILD_PLATFORM_IPHONE)
  if (WIN32 OR APPLE)
    set(Boost_USE_STATIC_LIBS TRUE)
  else ()
    # Statically linking boost to a dynamic Ogre build doesn't work on Linux 64bit
    set(Boost_USE_STATIC_LIBS ${OGRE_STATIC})
  endif ()
  if (MINGW)
    # this is probably a bug in CMake: the boost find module tries to look for
    # boost libraries with name libboost_*, but CMake already prefixes library
    # search names with "lib". This is the workaround.
    set(CMAKE_FIND_LIBRARY_PREFIXES ${CMAKE_FIND_LIBRARY_PREFIXES} "")
  endif ()

  # Components that need linking (NB does not include header-only components like bind)
  set(OGRE_BOOST_COMPONENTS thread date_time system)
  find_package(Boost COMPONENTS ${OGRE_BOOST_COMPONENTS} QUIET)
  if (NOT Boost_FOUND)
    # Try again with the other type of libs
    set(Boost_USE_STATIC_LIBS NOT ${Boost_USE_STATIC_LIBS})
    find_package(Boost COMPONENTS ${OGRE_BOOST_COMPONENTS} QUIET)
  endif()
  find_package(Boost QUIET)
  
  # Set up referencing of Boost
  include_directories(${Boost_INCLUDE_DIR})
  add_definitions(-DBOOST_ALL_NO_LIB)
  set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${Boost_LIBRARIES})
endif()

if (WIN32)
  set(OGRE_LIBRARIES hid.lib ${OGRE_LIBRARIES})
endif()

set(HDRS
    ./src/CEGUI_main.h
	./src/CEGUI_keytranslate.h
    ./src/INPUT_main.h
    ./src/Log.h
    ./src/OGRE_main.h
    ./src/MediaResources.h
    ./src/input_test_layout.h
  )

set(SRCS
    ./src/CEGUI_main.cpp
    ./src/INPUT_main.cpp
    ./src/OGRE_main.cpp
  )

include_directories(${CEGUI_INCLUDE_DIRS}
                    ${OGRE_INCLUDE_DIRS}
                    ${OGRE_SAMPLES_INCLUDEPATH}

  )

add_executable(TestBed WIN32 ${HDRS} ${SRCS})

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
  add_definitions(-D_DEBUG=1)
else()
  add_definitions(-DNDEBUG=1)
endif ()

set_target_properties(TestBed PROPERTIES DEBUG_POSTFIX _d)

target_link_libraries(TestBed ${OGRE_LIBRARIES})

file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/dist/bin)
file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/dist/media)

# post-build copy for win32
if(WIN32 AND NOT MINGW)
  add_custom_command( TARGET TestBed PRE_BUILD
    COMMAND if not exist .\\dist\\bin mkdir .\\dist\\bin )
  add_custom_command( TARGET TestBed POST_BUILD
    COMMAND copy \"$(TargetPath)\" .\\dist\\bin )
endif(WIN32 AND NOT MINGW)

if(MINGW OR UNIX)
  set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/dist/bin)
endif(MINGW OR UNIX)

if(WIN32)
  
  install(TARGETS TestBed
    RUNTIME DESTINATION bin
    CONFIGURATIONS All)
  
  install(DIRECTORY ${CMAKE_SOURCE_DIR}/dist/Media
    DESTINATION ./
    CONFIGURATIONS Release RelWithDebInfo Debug
    )
  
  install(FILES ${OGRE_PLUGIN_DIR_REL}/OgreMain.dll
    ${OGRE_PLUGIN_DIR_REL}/RenderSystem_Direct3D9.dll
    ${OGRE_PLUGIN_DIR_REL}/RenderSystem_GL.dll
    DESTINATION bin
    CONFIGURATIONS Release RelWithDebInfo
    )
  
  install(FILES ${OGRE_PLUGIN_DIR_DBG}/OgreMain_d.dll
    ${OGRE_PLUGIN_DIR_DBG}/RenderSystem_Direct3D9_d.dll
    ${OGRE_PLUGIN_DIR_DBG}/RenderSystem_GL_d.dll
    DESTINATION bin
    CONFIGURATIONS Debug
    )
  
  # as of sdk 1.7.2 we need to copy the boost dll's as well
  # because they're not linked statically (it worked with 1.7.1 though)
  install(FILES ${Boost_DATE_TIME_LIBRARY_RELEASE}
    ${Boost_THREAD_LIBRARY_RELEASE}
    ${Boost_SYSTEM_LIBRARY_RELEASE}
    DESTINATION bin
    CONFIGURATIONS Release RelWithDebInfo
    )
  
  install(FILES ${Boost_DATE_TIME_LIBRARY_DEBUG}
    ${Boost_THREAD_LIBRARY_DEBUG}
    ${Boost_SYSTEM_LIBRARY_DEBUG}
    DESTINATION bin
    CONFIGURATIONS Debug
    )

  if (USE_CEGUI)
    install(FILES ${CEGUI_BINARIES_REL}
      DESTINATION bin
      CONFIGURATIONS Release RelWithDebInfo
      )

    install(FILES ${CEGUI_BINARIES_DBG}
      DESTINATION bin
      CONFIGURATIONS Debug
      )
  endif()

  if (USE_TERRAIN)
    install(FILES ${OGRE_PLUGIN_DIR_REL}/OgreTerrain.dll
      ${OGRE_PLUGIN_DIR_REL}/OgrePaging.dll
      DESTINATION bin
      CONFIGURATIONS Release RelWithDebInfo
      )

    install(FILES ${OGRE_PLUGIN_DIR_DBG}/OgreTerrain_d.dll
      ${OGRE_PLUGIN_DIR_DBG}/OgrePaging_d.dll
      DESTINATION bin
      CONFIGURATIONS Debug
      )
  endif()

  if (USE_CG_PROGRAM_MANAGER)
    install(FILES ${OGRE_PLUGIN_DIR_REL}/Plugin_CgProgramManager.dll
      DESTINATION bin
      CONFIGURATIONS Release RelWithDebInfo
      )

    install(FILES ${OGRE_PLUGIN_DIR_DBG}/Plugin_CgProgramManager_d.dll
      DESTINATION bin
      CONFIGURATIONS Debug
      )
  endif()

  if (USE_OCTREE_SCENE_MANAGER)
    install(FILES ${OGRE_PLUGIN_DIR_REL}/Plugin_OctreeSceneManager.dll
      DESTINATION bin
      CONFIGURATIONS Release RelWithDebInfo
      )

    install(FILES ${OGRE_PLUGIN_DIR_DBG}/Plugin_OctreeSceneManager_d.dll
      DESTINATION bin
      CONFIGURATIONS Debug
      )
  endif()
endif(WIN32)

if(UNIX)
  # TODO --------------------------
  install(TARGETS TestBed
    RUNTIME DESTINATION bin
    CONFIGURATIONS All)
  
  install(DIRECTORY ${CMAKE_SOURCE_DIR}/dist/media
    DESTINATION ./
    CONFIGURATIONS Release RelWithDebInfo Debug
    )
  
endif(UNIX)

